jQuery.fn.objectEstimateIcon = function (s) {
	var settings = jQuery.extend({
		value: 0,
		short_format: true,
		can_change: false,
		estimate_autogenerated : false,
		estimates_url: false,
		set_estimate_url: false
	}, s);
	return this.each(function () {
		var wrapper = $(this).addClass("object_estimate");
		if (settings.estimates_url) {
			var caption = settings.value > 0 ? (settings.value+"h") : "0h";
			var autogenerated_label = settings.estimate_autogenerated ? App.lang("Stima calcolata sui task") : App.lang("Stima inserita manualmente");
			var icon = settings.estimate_autogenerated;
			if(settings.estimate_autogenerated){
				var value = $('<span title="' + autogenerated_label + '" estimated_time="' + settings.value + '">' + caption + "</span>").appendTo(wrapper);
			}else{
				var value = $('<a href="' + App.extendUrl(settings.estimates_url, {
					async: 1
				}) + '" title="' + autogenerated_label + '" estimated_time="' + settings.value + '">' + caption + "</a>").flyout({
					width: 800
				}).appendTo(wrapper);
			}
			if (settings.can_change) {
				wrapper.append(" ");
				var change = $('<a href="' + App.extendUrl(settings.set_estimate_url, {
					async: 1
				}) + '" title="' + App.lang("Change Estimate") + '"><img src="' + App.Wireframe.Utils.imageUrl("icons/12x12/edit.png", "environment") + '" alt="' + App.lang("Change") + '"></a>').appendTo(wrapper);
				change.flyoutForm({
					width: 400,
					success: function (estimate) {
						if (typeof (estimate) == "object" && estimate) {
							console.log(estimate);
							var caption = estimate.value > 0 ? (estimate.value+"h") : "0h";
							value.text(caption).attr("estimated_time", estimate.value);
							value.text(caption).attr("title", App.lang("Stima inserita manualmente"));
							if(estimate.value > 0 && wrapper.parent().attr("sum_time")!= undefined){
								if(wrapper.parent().attr("sum_time") > estimate.value){
									//Ho impiegato più tempo della stima
									wrapper.parent().css('color', 'red');
								}else{
									wrapper.parent().css('color', 'green');
								}
							} else {
								wrapper.parent().css('color', 'red');
							}
						}
					}
				})
			}
		} else {
			wrapper.append(settings.value > 0 ? App.lang(":estimate h", {estimate: (settings.value)}) : "0 h")
		}
	})
};

App.Inspector.Properties.MilestoneCustomComplete = function (object, client_interface, route) {
	var complete_wrapper = $(this);
	complete_wrapper.html("");
	var img = App.Wireframe.Utils.imageUrl('icons/12x12/edit.png', 'environment');
	var link = $("<a href='"+route+"' class='set_milestone_percent_completion'><img src='"+img+"' /></a>");
	var value = $("<span id='percent_value_milestone_"+object.id+"'>"+object.custom_percent_complete+"%</span>");
	complete_wrapper.append(value);
	complete_wrapper.append(" ");
	complete_wrapper.append(link);
	link.attr('href', App.extendUrl($(this).attr('href'), { async: 1 }) );
	link.flyoutForm({
		width: 400,
		success: function (milestone) {
			if (typeof (milestone) == "object" && milestone) {
				var id = milestone.id;
				$('#percent_value_milestone_'+id).text(milestone.custom_percent_complete+'%');            	
			}
		}
	})
};

App.Inspector.Properties.MilestoneEstimation = function (object, settings) {
	var est_wrapper = $(this);
	est_wrapper.html("");
	est_wrapper.append("<span id='milestone_estimated_container_id_"+settings['object_id']+"' sum_time='"+settings['summed_time']+"'>"+settings['summed_time']+"h di <span id='milestone_estimate_"+settings['object_id']+"'></span></span>");
	// overwrite for update
	settings['value'] = object.estimate.value;
	$("#milestone_estimate_"+settings['object_id']).objectEstimateIcon(settings);
	if(settings['summed_time'] > settings['value']) {
		est_wrapper.css('color', 'red');
	} else {
		est_wrapper.css('color', 'green');
	}
};

