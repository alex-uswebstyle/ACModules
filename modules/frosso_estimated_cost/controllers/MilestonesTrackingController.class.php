<?php
// We need projects controller
AngieApplication::useController('milestones', SYSTEM_MODULE);

/**
 * MilestonesTrackingController controller
 *
*/
class MilestonesTrackingController extends MilestonesController {
	/**
	 * Active module
	 *
	 * @var string
	 */
	protected $active_module = FROSSO_EC_MODULE;


	/**
	 * Object tracking controller delegate
	 *
	 * @var ObjectTrackingController
	 */
	protected $object_tracking_delegate;

	/**
	 * Construct controller
	 *
	 * @param Request $parent
	 * @param mixed $context
	 */
	function __construct($parent, $context = null) {
		parent::__construct($parent, $context);

		if($this->getControllerName() == 'milestones_tracking') {
			if(AngieApplication::isModuleLoaded('tracking')) {
				$this->object_tracking_delegate = $this->__delegate('object_tracking', TRACKING_MODULE, 'project_milestone');
			} // if

		} // if
	} // __construct

	function __before() {
		parent::__before();

		$milestone_id = $this->request->getId('milestone_id');
		if($milestone_id) {
			$this->active_milestone = new RemediaMilestone($milestone_id);
		} // if

		if($this->active_milestone && $this->active_milestone instanceof RemediaMilestone) {
			if (!$this->active_milestone->isAccessible()) {
				$this->response->notFound();
			} // if
		}else{
			$this->active_milestone = new RemediaMilestone();
			$this->active_milestone->setProject($this->active_project);
		}

		$this->smarty->assign(array(
				'active_milestone' => $this->active_milestone,
		));

		if($this->object_tracking_delegate instanceof ObjectTrackingController) {
			$this->object_tracking_delegate->__setProperties(array(
					'active_project' => &$this->active_project,
					'active_tracking_object' => &$this->active_milestone,
			));
		} // if

	}

	function edit(){
		// 		$this->active_milestone = new Milestone($this->active_milestone->getId());
		// 		parent::edit();
		// 		$this->active_milestone = new RemediaMilestone($this->active_milestone->getId());

		if($this->request->isAsyncCall() || $this->request->isMobileDevice() || ($this->request->isApiCall() && $this->request->isSubmitted())) {
			if($this->active_milestone->isLoaded()) {
				if($this->active_milestone->canEdit($this->logged_user)) {

					$milestone_data = $this->request->post('milestone');

					if(!is_array($milestone_data)) {
						$milestone_data = array(
								'name' => $this->active_milestone->getName(),
								'body' => $this->active_milestone->getBody(),
								'start_on' => $this->active_milestone->getStartOn(),
								'due_on' => $this->active_milestone->getDueOn(),
								'priority' => $this->active_milestone->getPriority(),
								'assignee_id' => $this->active_milestone->getAssigneeId(),
								'other_assignees' => $this->active_milestone->assignees()->getOtherAssigneeIds(),
								'custom_field_1' => $this->active_milestone->getCustomField1(),
								'custom_field_2' => $this->active_milestone->getCustomField2(),
								'custom_field_3' => $this->active_milestone->getCustomField3(),
						);

						if(AngieApplication::isModuleLoaded('tracking')) {
							$milestone_data['estimate'] = $this->active_milestone->tracking()->getEstimate() instanceof Estimate ? $this->active_milestone->tracking()->getEstimate()->getValue() : null;
							$milestone_data['estimate_job_type_id'] = $this->active_milestone->tracking()->getEstimate() instanceof Estimate ? $this->active_milestone->tracking()->getEstimate()->getJobTypeId() : null;
							$milestone_data['estimate_autogenerated'] = $this->active_milestone->tracking()->getEstimate() instanceof Estimate ? $this->active_milestone->tracking()->isEstimateAutogenerated() : null;
						} // if
					}

					$this->response->assign('milestone_data', $milestone_data);

					if($this->request->isSubmitted()) {

						$current_assignee = $this->active_milestone->assignees()->getAssignee();

						try {
							DB::beginWork('Updating milestone @ ' . __CLASS__);

							$this->active_milestone->setAttributes($milestone_data);

							$this->active_milestone->save();

							if(AngieApplication::isModuleLoaded('tracking') && TrackingObjects::canAdd($this->logged_user, $this->active_project)) {
								$estimate_value = isset($milestone_data['estimate_value']) && $milestone_data['estimate_value'] ? (float) $milestone_data['estimate_value'] : null;
								$estimate_job_type = isset($milestone_data['estimate_job_type_id']) && $milestone_data['estimate_job_type_id'] ? JobTypes::findById($milestone_data['estimate_job_type_id']) : null;
								$estimate_comment = isset($milestone_data['estimate_comment']) ? $milestone_data['estimate_comment'] : null;
									
								if($estimate_value > 0 && $estimate_job_type instanceof JobType) {
									$this->active_milestone->tracking()->setEstimate($estimate_value, $estimate_job_type, $estimate_comment, $this->logged_user);
								} else {
									if($this->active_milestone->tracking()->getEstimate() instanceof Estimate) {
										$this->active_milestone->tracking()->setEstimate($estimate_value, $estimate_job_type, $estimate_comment, $this->logged_user);
									} // if
								} // if
							} // if

							DB::commit('Milestone updated @ ' . __CLASS__);

							$this->active_milestone->assignees()->notifyOnReassignment($current_assignee, $this->active_milestone->assignees()->getAssignee(), $this->logged_user);

							if ($this->request->isPageCall()) {
								$this->flash->success('Milestone ":name" has been updated', array('name' => $this->active_milestone->getName()));
								$this->response->redirectToUrl($this->active_milestone->getViewUrl());
							} else {
								$this->response->respondWithData($this->active_milestone, array(
										'as' => 'milestone',
										'detailed' => true,
								));
							} //if
						} catch(Exception $e) {
							DB::rollback('Failed to update milestone @ ' . __CLASS__);
							$this->response->exception($e);
						} // try
					} // if

				} else {
					$this->response->forbidden();
				} // if
			} else {
				$this->response->notFound();
			} // if
		} else {
			$this->response->badRequest();
		} // if
	} // edit


	function add() {
		if($this->request->isAsyncCall() || $this->request->isMobileDevice() || ($this->request->isApiCall() && $this->request->isSubmitted())) {
			if(Milestones::canAdd($this->logged_user, $this->active_project)) {
				$milestone_data = $this->request->post('milestone');
				$this->smarty->assign('milestone_data', $milestone_data);

				if($this->request->isSubmitted()) {
					try {
						DB::beginWork('Creating milestone @ ' . __CLASS__);

						$this->active_milestone = new RemediaMilestone();

						$this->active_milestone->setAttributes($milestone_data);

						$start_on = $this->active_milestone->getStartOn();
						if ($start_on instanceof DateValue) {
							if (Globalization::isWeekend($start_on) || Globalization::isDayOff($start_on)) {
								throw new Error(lang('Start date needs to be set on working day'));
							} //if
						} //if

						$due_on = $this->active_milestone->getDueOn();
						if ($due_on instanceof DateValue){
							if (Globalization::isWeekend($due_on) || Globalization::isDayOff($due_on)) {
								throw new Error(lang('Due date needs to be set on working day'));
							} //if
						} //if

						$this->active_milestone->setProjectId($this->active_project->getId());
						$this->active_milestone->setCreatedBy($this->logged_user);
						$this->active_milestone->setState(STATE_VISIBLE);
						$this->active_milestone->setVisibility(VISIBILITY_NORMAL);

						$this->active_milestone->save();
						
						/* INIZIO frosso hack */
						if(AngieApplication::isModuleLoaded('tracking') && TrackingObjects::canAdd($this->logged_user, $this->active_project)) {
							$estimate_value = isset($milestone_data['estimate_value']) && $milestone_data['estimate_value'] ? (float) $milestone_data['estimate_value'] : null;
							$estimate_job_type = isset($milestone_data['estimate_job_type_id']) && $milestone_data['estimate_job_type_id'] ? JobTypes::findById($milestone_data['estimate_job_type_id']) : null;
							$estimate_comment = isset($milestone_data['estimate_comment']) ? $milestone_data['estimate_comment'] : null;
								
							if($estimate_value > 0 && $estimate_job_type instanceof JobType) {
								$this->active_milestone->tracking()->setEstimate($estimate_value, $estimate_job_type, $estimate_comment, $this->logged_user);
							} else {
								if($this->active_milestone->tracking()->getEstimate() instanceof Estimate) {
									$this->active_milestone->tracking()->setEstimate($estimate_value, $estimate_job_type, $estimate_comment, $this->logged_user);
								} // if
							} // if
						} // if
						/* FINE frosso hack */

						$this->active_milestone->subscriptions()->set(array_unique(array_merge(
								(array) $this->logged_user->getId(),
								(array) $this->active_project->getLeaderId(),
								(array) array_var($milestone_data, 'subscribers', array())
						)), false);

						DB::commit('Milestone created @ ' . __CLASS__);

						$this->logged_user->notifier()->notifySubscribers($this->active_milestone, 'system/new_milestone');

						if ($this->request->isPageCall()) {
							$this->flash->success('Milestone ":name" has been created', array('name' => $this->active_milestone->getName()));
							$this->response->redirectToUrl($this->active_milestone->getViewUrl());
						} else {
							$this->response->respondWithData($this->active_milestone, array(
									'as' => 'milestone',
									'detailed' => true,
							));
						} // if
					} catch(Exception $e) {
						DB::rollback('Failed to create milestone @ ' . __CLASS__);

						if ($this->request->isPageCall()) {
							$this->smarty->assign('errors', $e);
						} else {
							$this->response->exception($e);
						} // if
					} // try
				} // if
			} else {
				$this->response->forbidden();
			} // if
		} else {
			$this->response->badRequest();
		} // if
	}

	function update_milestone() {
		parent::update_milestone();
	}

}